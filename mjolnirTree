#!/usr/bin/env python3

import sys, os, argparse
import docker
import signal

#local libraries
from app.mjolnr import mjolnr

#setup signal handler
def handler(sig,frame):
    print('\nShutting down the running docker containers and exiting...')
    client = docker.from_env()
    container_list = client.containers.list(filters={"label":"prog=mjolnr"})
    for container in container_list:
        print("shutting down container: ",container.name)
        container.kill()
    sys.exit()
signal.signal(signal.SIGINT, handler)

# setup argparser to display help if no arguments
class ArgParser(argparse.ArgumentParser):
    def error(self, message):
        sys.stderr.write('error: %s\n' % message)
        self.print_help()
        sys.exit(2)

# determine command line arguments and get path
parser = ArgParser(description='Calculate pairwise hamming distance matrix from gene prensece/absence matrix and create nj tree')
parser.add_argument('tsv', type=str, help="Binary gene presence and absence file (tab delimited)")
parser.add_argument('-o', metavar='output', type=str, help="output directory - defaults to working directory")
parser.add_argument('prefix', type=str, default="output", nargs='?', help="Output prefix, defaults to 'output'")
parser.add_argument('-t', action="store_true", required=False, help="Transpose tsv")
parser.add_argument('boot', type=int, default=0, nargs='?', help="Perform boostrapping n times, defaults to '0")

args = parser.parse_args()

#get current working dir if output is empty
try:
    out = os.path.abspath(args.o)
except (AttributeError, TypeError) as err:
    out = os.getcwd()

tsvfile = os.path.abspath(args.tsv)
prefix = args.prefix

if args.t == True:
    transpose = "True"
else:
    transpose = "False"

mjolnr(tsvfile, out, prefix, transpose, args.boot)
